/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */


import '@stencil/core';

import '@stencil/router';
import '@stencil/state-tunnel';
import {
  MatchResults,
  RouterHistory,
} from '@stencil/router';
import {
  Formation,
} from './global/formation';


export namespace Components {

  interface FormAdd {
    'history': RouterHistory;
    'match': MatchResults;
  }
  interface FormAddAttributes extends StencilHTMLAttributes {
    'history'?: RouterHistory;
    'match'?: MatchResults;
  }

  interface FormForm {
    'formation': Formation;
    'history': RouterHistory;
    'isEditMode': boolean;
    'match': MatchResults;
  }
  interface FormFormAttributes extends StencilHTMLAttributes {
    'formation'?: Formation;
    'history'?: RouterHistory;
    'isEditMode'?: boolean;
    'match'?: MatchResults;
  }

  interface UniteenseignementAdd {
    'history': RouterHistory;
  }
  interface UniteenseignementAddAttributes extends StencilHTMLAttributes {
    'history'?: RouterHistory;
  }

  interface SpiCreatee {
    'history': RouterHistory;
  }
  interface SpiCreateeAttributes extends StencilHTMLAttributes {
    'history'?: RouterHistory;
  }

  interface SpiHeader {}
  interface SpiHeaderAttributes extends StencilHTMLAttributes {}

  interface SpiHome {}
  interface SpiHomeAttributes extends StencilHTMLAttributes {}

  interface SpiList {}
  interface SpiListAttributes extends StencilHTMLAttributes {}

  interface SpiLg {
    'history': RouterHistory;
  }
  interface SpiLgAttributes extends StencilHTMLAttributes {
    'history'?: RouterHistory;
  }

  interface SpiProfile {}
  interface SpiProfileAttributes extends StencilHTMLAttributes {}

  interface QualificatifAdd {
    'history': RouterHistory;
  }
  interface QualificatifAddAttributes extends StencilHTMLAttributes {
    'history'?: RouterHistory;
  }

  interface SpiQualificatif {}
  interface SpiQualificatifAttributes extends StencilHTMLAttributes {}

  interface SpiRoot {}
  interface SpiRootAttributes extends StencilHTMLAttributes {}

  interface SpiTest {}
  interface SpiTestAttributes extends StencilHTMLAttributes {}

  interface SpiUe {
    'match': MatchResults;
  }
  interface SpiUeAttributes extends StencilHTMLAttributes {
    'match'?: MatchResults;
  }
}

declare global {
  interface StencilElementInterfaces {
    'FormAdd': Components.FormAdd;
    'FormForm': Components.FormForm;
    'UniteenseignementAdd': Components.UniteenseignementAdd;
    'SpiCreatee': Components.SpiCreatee;
    'SpiHeader': Components.SpiHeader;
    'SpiHome': Components.SpiHome;
    'SpiList': Components.SpiList;
    'SpiLg': Components.SpiLg;
    'SpiProfile': Components.SpiProfile;
    'QualificatifAdd': Components.QualificatifAdd;
    'SpiQualificatif': Components.SpiQualificatif;
    'SpiRoot': Components.SpiRoot;
    'SpiTest': Components.SpiTest;
    'SpiUe': Components.SpiUe;
  }

  interface StencilIntrinsicElements {
    'form-add': Components.FormAddAttributes;
    'form-form': Components.FormFormAttributes;
    'uniteenseignement-add': Components.UniteenseignementAddAttributes;
    'spi-createe': Components.SpiCreateeAttributes;
    'spi-header': Components.SpiHeaderAttributes;
    'spi-home': Components.SpiHomeAttributes;
    'spi-list': Components.SpiListAttributes;
    'spi-lg': Components.SpiLgAttributes;
    'spi-profile': Components.SpiProfileAttributes;
    'qualificatif-add': Components.QualificatifAddAttributes;
    'spi-qualificatif': Components.SpiQualificatifAttributes;
    'spi-root': Components.SpiRootAttributes;
    'spi-test': Components.SpiTestAttributes;
    'spi-ue': Components.SpiUeAttributes;
  }


  interface HTMLFormAddElement extends Components.FormAdd, HTMLStencilElement {}
  var HTMLFormAddElement: {
    prototype: HTMLFormAddElement;
    new (): HTMLFormAddElement;
  };

  interface HTMLFormFormElement extends Components.FormForm, HTMLStencilElement {}
  var HTMLFormFormElement: {
    prototype: HTMLFormFormElement;
    new (): HTMLFormFormElement;
  };

  interface HTMLUniteenseignementAddElement extends Components.UniteenseignementAdd, HTMLStencilElement {}
  var HTMLUniteenseignementAddElement: {
    prototype: HTMLUniteenseignementAddElement;
    new (): HTMLUniteenseignementAddElement;
  };

  interface HTMLSpiCreateeElement extends Components.SpiCreatee, HTMLStencilElement {}
  var HTMLSpiCreateeElement: {
    prototype: HTMLSpiCreateeElement;
    new (): HTMLSpiCreateeElement;
  };

  interface HTMLSpiHeaderElement extends Components.SpiHeader, HTMLStencilElement {}
  var HTMLSpiHeaderElement: {
    prototype: HTMLSpiHeaderElement;
    new (): HTMLSpiHeaderElement;
  };

  interface HTMLSpiHomeElement extends Components.SpiHome, HTMLStencilElement {}
  var HTMLSpiHomeElement: {
    prototype: HTMLSpiHomeElement;
    new (): HTMLSpiHomeElement;
  };

  interface HTMLSpiListElement extends Components.SpiList, HTMLStencilElement {}
  var HTMLSpiListElement: {
    prototype: HTMLSpiListElement;
    new (): HTMLSpiListElement;
  };

  interface HTMLSpiLgElement extends Components.SpiLg, HTMLStencilElement {}
  var HTMLSpiLgElement: {
    prototype: HTMLSpiLgElement;
    new (): HTMLSpiLgElement;
  };

  interface HTMLSpiProfileElement extends Components.SpiProfile, HTMLStencilElement {}
  var HTMLSpiProfileElement: {
    prototype: HTMLSpiProfileElement;
    new (): HTMLSpiProfileElement;
  };

  interface HTMLQualificatifAddElement extends Components.QualificatifAdd, HTMLStencilElement {}
  var HTMLQualificatifAddElement: {
    prototype: HTMLQualificatifAddElement;
    new (): HTMLQualificatifAddElement;
  };

  interface HTMLSpiQualificatifElement extends Components.SpiQualificatif, HTMLStencilElement {}
  var HTMLSpiQualificatifElement: {
    prototype: HTMLSpiQualificatifElement;
    new (): HTMLSpiQualificatifElement;
  };

  interface HTMLSpiRootElement extends Components.SpiRoot, HTMLStencilElement {}
  var HTMLSpiRootElement: {
    prototype: HTMLSpiRootElement;
    new (): HTMLSpiRootElement;
  };

  interface HTMLSpiTestElement extends Components.SpiTest, HTMLStencilElement {}
  var HTMLSpiTestElement: {
    prototype: HTMLSpiTestElement;
    new (): HTMLSpiTestElement;
  };

  interface HTMLSpiUeElement extends Components.SpiUe, HTMLStencilElement {}
  var HTMLSpiUeElement: {
    prototype: HTMLSpiUeElement;
    new (): HTMLSpiUeElement;
  };

  interface HTMLElementTagNameMap {
    'form-add': HTMLFormAddElement
    'form-form': HTMLFormFormElement
    'uniteenseignement-add': HTMLUniteenseignementAddElement
    'spi-createe': HTMLSpiCreateeElement
    'spi-header': HTMLSpiHeaderElement
    'spi-home': HTMLSpiHomeElement
    'spi-list': HTMLSpiListElement
    'spi-lg': HTMLSpiLgElement
    'spi-profile': HTMLSpiProfileElement
    'qualificatif-add': HTMLQualificatifAddElement
    'spi-qualificatif': HTMLSpiQualificatifElement
    'spi-root': HTMLSpiRootElement
    'spi-test': HTMLSpiTestElement
    'spi-ue': HTMLSpiUeElement
  }

  interface ElementTagNameMap {
    'form-add': HTMLFormAddElement;
    'form-form': HTMLFormFormElement;
    'uniteenseignement-add': HTMLUniteenseignementAddElement;
    'spi-createe': HTMLSpiCreateeElement;
    'spi-header': HTMLSpiHeaderElement;
    'spi-home': HTMLSpiHomeElement;
    'spi-list': HTMLSpiListElement;
    'spi-lg': HTMLSpiLgElement;
    'spi-profile': HTMLSpiProfileElement;
    'qualificatif-add': HTMLQualificatifAddElement;
    'spi-qualificatif': HTMLSpiQualificatifElement;
    'spi-root': HTMLSpiRootElement;
    'spi-test': HTMLSpiTestElement;
    'spi-ue': HTMLSpiUeElement;
  }


  export namespace JSX {
    export interface Element {}
    export interface IntrinsicElements extends StencilIntrinsicElements {
      [tagName: string]: any;
    }
  }
  export interface HTMLAttributes extends StencilHTMLAttributes {}

}
